import os
import json
import base64
import asyncio
import sqlite3
from fastapi import FastAPI, WebSocket, Request
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.websockets import WebSocketDisconnect
from twilio.twiml.voice_response import VoiceResponse, Connect
from dotenv import load_dotenv
from apscheduler.schedulers.background import BackgroundScheduler
import requests
from datetime import datetime, timedelta
import websockets

load_dotenv()
app = FastAPI()

# Environment variables
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
TWILIO_PHONE_NUMBER = os.getenv('TWILIO_PHONE_NUMBER')
SMS_KEY = os.getenv('SMS_KEY')
PORT = int(os.getenv('PORT', 3000))

# Database setup
DB_PATH = "bookings.db"
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS bookings (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    phone TEXT,
    city TEXT,
    test TEXT,
    date TEXT,
    time TEXT,
    collection TEXT
)''')
conn.commit()

# System message for AI
SYSTEM_MESSAGE = """
You are Cosmo, a healthcare expert helping users book diagnostic tests.
Ask for: Phone, City, Test Name, Date, Time, Collection Type (Home/In-Clinic)
After booking, summarize and confirm the booking.
"""

# Scheduler to send reminders
def reminder_job():
    now = datetime.now()
    upcoming_time = (now + timedelta(hours=1)).strftime('%H:%M')
    today = now.strftime('%d-%m-%Y')
    cursor.execute("SELECT * FROM bookings WHERE date=? AND time=?", (today, upcoming_time))
    rows = cursor.fetchall()
    for row in rows:
        send_sms_reminder(row[1], row[2], row[3], row[4], row[5], row[6])

def send_sms_reminder(phone, city, test, date, time, collection):
    msg = f"Reminder: Your {test} is scheduled for {date} at {time} ({collection}) in {city}."
    url = "https://www.fast2sms.com/dev/bulkV2"
    querystring = {
        "authorization": SMS_KEY,
        "message": msg,
        "language": "english",
        "route": "q",
        "numbers": phone
    }
    headers = {'cache-control': "no-cache"}
    response = requests.get(url, headers=headers, params=querystring)
    print("Reminder sent:", response.status_code)

scheduler = BackgroundScheduler()
scheduler.add_job(reminder_job, 'interval', minutes=30)
scheduler.start()

@app.get("/", response_class=JSONResponse)
async def root():
    return {"message": "AI HealthCall+ running."}

@app.api_route("/incoming-call", methods=["GET", "POST"])
async def handle_incoming_call(request: Request):
    response = VoiceResponse()
    response.say("Hello! This is Cosmo from Redcliffe Labs. Let's book your diagnostic test.")
    connect = Connect()
    connect.stream(url='wss://your-ngrok-url/media-stream')
    response.append(connect)
    return HTMLResponse(content=str(response), media_type="application/xml")

@app.websocket("/media-stream")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    async with websockets.connect(
        'wss://api.openai.com/v1/realtime?model=gpt-4o-realtime-preview-2024-10-01',
        extra_headers={
            "Authorization": f"Bearer {OPENAI_API_KEY}",
            "OpenAI-Beta": "realtime=v1"
        }
    ) as openai_ws:
        await initialize_session(openai_ws)
        async for message in websocket.iter_text():
            data = json.loads(message)
            if data.get("event") == "media":
                await openai_ws.send(json.dumps({
                    "type": "input_audio_buffer.append",
                    "audio": data['media']['payload']
                }))
            elif data.get("event") == "start":
                print("Stream started.")
            elif data.get("event") == "stop":
                print("Stream stopped.")

async def initialize_session(openai_ws):
    session_update = {
        "type": "session.update",
        "session": {
            "turn_detection": {"type": "server_vad"},
            "input_audio_format": "g711_ulaw",
            "output_audio_format": "g711_ulaw",
            "voice": "alloy",
            "instructions": SYSTEM_MESSAGE,
            "modalities": ["text", "audio"],
            "temperature": 0.8,
        }
    }
    await openai_ws.send(json.dumps(session_update))

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="127.0.0.1", port=PORT)
